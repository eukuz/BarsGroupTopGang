@inject Data.Services.TaskService taskService
@inject NavigationManager NavigationManager
@using ChadWebCalendar.Components.Tasks
@attribute [Authorize]
@using AntDesign;
@inject DialogService DialogService
@using ChadWebCalendar.Data

<div class="list-group" style="height: 800px; width: 100%; overflow: auto; font-size: 30px;">
    @foreach (var task in taskService.GetTasks(user))
    {
        if (task.Project.Id != null && task.Project.Id == projectId)
        {   <div style="display:flex; width: 100%">
                <button type="button" class="list-group-item list-group-item-success btn btn-light" @onclick="() => ChangeIsCompleted(task.Id)" style="width: 100%; overflow: hidden; word-break:break-word;">
                    <div class="task_container" Style="justify-content: space-between; overflow:hidden; max-width: 100%;">
                        @if (task.IsCompleted == false)
                        {
                            @task.Name
                        }
                        else
                        {
                            <s>@task.Name</s>
                        }

                    </div>
                </button>
                <Button @onclick="() => EditTaskPage(task.Id)" style="height:100%">
                    &#9881;
                </Button>
            </div>
        }
 
     }
</div>

@code {
    Data.User user;
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        user = taskService.GetUser(authenticationState.Result.User.Identity.Name);
        tasks = taskService.GetTasks(user);
    }

    [Parameter] public int? projectId { get; set; }

    IEnumerable<Data.Task> tasks;

    public int? taskId { get; set; }

    bool destroyModal = false;

    bool visibleEditTask = false;

    private async System.Threading.Tasks.Task EditTaskPage(int? taskId)
    {
        await DialogService.OpenAsync<TaskEdit>("Изменить задачу",
            new Dictionary<string, object> { { "taskId", taskId } });
    }

    private void ChangeIsCompleted(int? taskId)
    {
        using (ApplicationContext db = new ApplicationContext())
        {
            Data.Task task = taskService.GetTask(taskId);
            task.IsCompleted = !task.IsCompleted;
            db.Tasks.Update(task);
            db.SaveChanges();
        }
    }
}