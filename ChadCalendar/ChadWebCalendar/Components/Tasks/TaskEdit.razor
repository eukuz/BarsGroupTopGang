@using ChadWebCalendar.Data.Services
@inject TaskService taskService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@using AntDesign;


<RadzenTemplateForm TItem="Data.Task" Data="@task" Submit=@OnSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label>Название задачи</label>
        <input class="form-control" type="text" placeholder="" @bind="task.Name" style="width: 250px">
        <ValidationMessage For="() => task" />
    </div>
    <div class="form-group">
        <label>Время на задачу</label>
        <input class="form-control" type="text" @bind="tempDT" min="0" style="width: 250px">
    </div>
    <div class="form-group">
        <label>Описание</label>
        <textarea class="form-control" type="text" placeholder="" @bind="task.Description" style="width: 250px"></textarea>
    </div>
    <div class="form-group">
        <label>Дедлайн</label>
        <input class="form-control" type="datetime-local" @bind="task.Deadline" @bind:format="yyyy-MM-ddTHH:mm" style="width: 250px"/>
    </div>
    <div class="form-group">
        <label>Выберите проект для задачи</label>
        @if (userProjects != null)
        {
            @if (task.Project == null)
            {
                task.Project = new Data.Project { Id = 0 };
            }
            <select @bind="projectId"  class="form-control" style="width: 250px">
                @foreach (var proj in userProjects)
                {
                    <option value="@proj.Id">@proj.Name</option>
                }
            </select>
        }
    </div>
    <div class="form-group">
        <input type="checkbox" @bind="task.AllowedToDistribute"><label>Задачу можно автоматически распределить</label><br>
    </div>
    <div class="form-group">
        <label> После какой задачи расположить</label>
        <select class="form-select" @bind="predecessorIdstr" style="width: 250px">
            <option value="@predecessorContainer">@taskService.GetNameOfTask(predecessorContainer)</option>
            @if (predecessorContainer != Constants.TempIdForDefaultChoice)
                {
                    <option value="@Constants.TempIdForDefaultChoice">После любой</option>
                } 
            @if (userTasks != null)
            {
                foreach (var _task in userTasks)
                {
                    <option value="@_task.Id"> @_task.Name </option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label>Максимум в день</label>
        <input class="form-control" type="number" placeholder="" @bind="task.MaxPerDay" min="0" style="width: 100px">
    </div>
    <div class="form-group" hidden>
        <label>Частота</label>
        <select  class="form-select" @bind="task.Frequency" style="width: 250px">
            <option disabled>Частота</option>
            <option>Никогда</option>
            <option>Каждый день</option>
            <option>Каждую неделю</option>
            <option>Каждый месяц</option>
        </select>
    </div>
    <div class="form-group">
        @if (isValidationError)
        {
            <label>Проверьте правильность заполнения полей</label>
        }
    </div>
    <div class="row">
        <div class="col-sm-3">
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Style="background-color: blue; min-height: 50px" Text="Готово" />
        </div>
        <div class="col-sm-3">
            <RadzenButton ButtonType="Radzen.ButtonType.Button" Style="background-color: red; min-height: 50px" Text="Удалить" Click="@deleteTask" />
        </div>
        <Dropdown Placement="@Placement.BottomCenter">
            <Overlay>
                <Menu>
                    <span style="padding: 15px">Укажите время начала события</span>
                    <div class="col">
                        <RadzenDatePicker @bind-Value="@startsAt" Name="Start" ShowTime="true" />
                    </div>
                    <div class="col-md-3" style="margin-top: 15px">
                        <button @onclick="mutation" class="btn btn-dark">Сохранить</button>
                    </div>
                </Menu>
            </Overlay>
            <ChildContent>
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Style="background-color: black; min-height: 50px">Сделать событием</RadzenButton>
            </ChildContent>
        </Dropdown>
    </div>
    
 </RadzenTemplateForm>

    @code {
        int? predecessorContainer = Constants.TempIdForDefaultChoice;
        [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
        [Parameter]
        public int? taskId { get; set; }
        int projectId = 0;
        DateTime startsAt;
        Data.Task task;
        Data.User user;
        TimeSpan? tempDT;
        IEnumerable<Data.Project> userProjects;
        IEnumerable<Data.Task> userTasks;
        bool isValidationError = false;
        protected override void OnInitialized()
        {
            task = taskService.GetTask(taskId);
            if (task.Predecessor != null)
                predecessorContainer = task.Predecessor.Id;
            else
                predecessorContainer = Constants.TempIdForDefaultChoice;
            if (task.Project != null)
                projectId = (int)task.Project.Id;
            tempDT = task.TimeTakes;
            user = taskService.GetUser(authenticationState.Result.User.Identity.Name);
            userTasks = taskService.GetTasks(user);
            userProjects = taskService.GetProjects(user);
        }
        void redirectToIndex()
        {
            NavigationManager.NavigateTo("/", true);
        }
        void deleteTask()
        {
            taskService.Delete(task);
            redirectToIndex();
        }
        void updateTask()
        {
            if (tempDT != null)
            {
                task.TimeTakes = tempDT;
            }
            if (predecessorContainer != Constants.TempIdForDefaultChoice)
                task.Predecessor = taskService.GetTask(predecessorContainer);
            else
                task.Predecessor = null;
            if (taskService.Edit(task, projectId, authenticationState.Result.User.Identity.Name))
            {
                OnInitialized();
                redirectToIndex();
            }
        }
        void mutation()
        {
            updateTask();
            taskService.Mutatuion(task.Id, authenticationState.Result.User.Identity.Name, startsAt);
            redirectToIndex();

        }

        void OnSubmit()
        {
            updateTask();
        }
    }
